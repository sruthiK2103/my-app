## React - UI library
## Advantages: Virtual DOM, reusable components, Facebook 

## Dependencies react-dom@16.4.0 react@16.4.0

## index.html

<html>
    <head>
        <link rel="stylesheet" href="style.css">
    </head>
    <body>
        <div id="root"></div>  -- id is important
        <script src="index.pack.js"></script>
    </body>
</html>

## index.js

** uses jsx - JSX is JavaScript syntax extension
HTML in JS : this is imported from "react", so where ever we are using jsx we need to import React from "react"

import React from "react"
import ReactDOM from "react-dom"

function MyInfo() {  -- functional component (name should be in camelcase with first letter as capital letter)
  return (
    <div>  
      <h1>Bob Ziroll</h1>
      <p>This is a paragraph about me...</p>
      <ul>
        <li>Thailand</li>
        <li>Japan</li>
        <li>Nordic Countries</li>
      </ul>
    </div>
  )
}
//jsx returns only one element, so everything should be wrapped as one element.

//ReactDOM.render(what we want to render, where we want to render)

ReactDOM.render(<MyInfo />, document.getElementById("root"))

// <MyInfo />  - creating an instance of function MyInfo - jsx syntax to call function MyInfo

## components
As components are reusable, create a components and folder and add all the components.

 create a component MyInfo.js in components folder  -- react comp name starts with Capital letter

import React from "react"  --its important

function MyInfo() {
  return (
    <div>
      <h1>Sruthi</h1>
      <p>This is a paragraph about me...</p>
      <ul>
        <li>Paris</li>
        <li>Italy</li>
        <li>London</li>
      </ul>
    </div>
  )
}
export default MyInfo -- to use it in index.js file

in index.js, remove MyInfo code and add import path of MyInfo

import MyInfo from "./components/MyInfo"

##Parent and child components

As the application grows larger, we can restructure our app to have a main comp which calls other components

create a comp - App.js

import React from "react"
import Header from "./Header"
import MainContent from "./MainContent"
import Footer from "./Footer"

function App() {
    return (
        <div>
            <Header />
            <MainContent /> //these are separate components that are imported into App comp
            <Footer />
        </div>
    )
}

export default App -- its imp to use it in other comps

##Styling react with CSS classes

We use 'className' attribute instead of class in JSx to style react elements (html elements)

** so we can use className on only react elements but not on our own comps

eg: <header className="navbar">This is the header</header>

in style.css file

body {
    margin: 0;
}

.navbar {
    height: 100px;
    background-color: #333;
    color: whitesmoke;
    margin-bottom: 15px;
    text-align: center;
    font-size: 30px;
    display: flex;
    justify-content: center;
    align-items: center;
}

##Some Caveats

- semi colons are not mandatory at the end of the statements
- using arrow functions : when we are using anonymus function or writing class methods
  const App = () => <h1>Hello world!</h1>

##JSx to JS and back

We have to use {} to write JS code in JSx

eg:

function App() {
  const firstName = "Bob"
  const lastName = "Ziroll"
  
  return (
    <h1>Hello {firstName + " " + lastName}!</h1>  //using JS in JSx
    <h1>Hello {`${firstName} ${lastName}`}!</h1>  //ES6 way of writing 
  )
}

eg: Displaying greeting message depending on the time of the display

function App() {
  const date = new Date()
  const hours = date.getHours()
  const styles = {
    fontSize: 30
  }
  let timeOfDay
  
  if (hours < 12) {
    timeOfDay = "morning"
    styles.color = "#8914A3"
  } else if (hours >= 12 && hours < 17) {
    timeOfDay = "afternoon"
    styles.color = "#04756F"
  } else {
    timeOfDay = "night"
    styles.color = "#D90000"
  }
  
  return (
    <h1 style={styles}>Good {timeOfDay}!</h1>
  )
}

## Inline styles with Style Property

We can use Style property to dynamically set styles using JS.
Style property expects a JS object, so to make it look cleaner we can create a variable with styles.

eg: const styles = {
    color: "#FF8C00", 
    backgroundColor: "#FF2D00",
    fontSize: 200
  } //these should be added according to JS syntax (i.e. it should be backgroundColor not background-color )
  //as these are in js, we cannot use styles like pseudo (hover) in here
  <h1 style={styles}>Good {timeOfDay}!</h1>
 (or) <h1 style={{color: "red"}}>Good {timeOfDay}!</h1> - converting jsx to js outer {} and inner {} is representing js obj
##Props
props is an object that has properties or the name of the prop that we pass in a component

eg: ContactCard comp

import React from "react"

function ContactCard(props) { //can be any name but props is common name
    return (
        <div className="contact-card">
            <img src={props.contact.imgUrl}/>
            <h3>{props.contact.name}</h3>
            <p>Phone: {props.contact.phone}</p>
            <p>Email: {props.contact.email}</p>
        </div>
    )
}
export default ContactCard

App.js comp

import React from "react"
import ContactCard from "./ContactCard"

function App() {
    return (
        <div className="contacts">
            <ContactCard //--we usually get this data from http call to an api that returns json file as response
                contact={{name: "Mr. Whiskerson", imgUrl: "http://placekitten.com/300/200", phone: "(212) 555-1234", email: "mr.whiskaz@catnap.meow"}}
            />
            
            <ContactCard 
                contact={{name: "Fluffykins", imgUrl: "http://placekitten.com/400/200", phone: "(212) 555-2345", email: "fluff@me.com"}}
            />
        </div>
    )
}

export default App

--if we are passing props as name: "Mr. Whiskerson", imgUrl: "http://placekitten.com/300/200" in App
we have to use below code in ContactCard
            <img src={props.imgUrl}/>
            <h3>{props.name}</h3>

##Props and styling practice

eg: Joke.js comp

import React from "react"

function Joke(props) {
    return (
        <div>
            <h3 style={{display: !props.question && "none"}}>Question: {props.question}</h3>
            <h3 style={{color: !props.question && "#888888"}}>Answer: {props.punchLine}</h3>
            <hr/>
        </div>
    )
}

export default Joke

- App.js comp

import React from "react"

import Joke from "./Joke"

function App() {
    return (
        <div>
            <Joke punchLine="It’s hard to explain puns to kleptomaniacs because they always take things literally." />           
            <Joke 
                question="What's the best thing about Switzerland?" 
                punchLine="I don't know, but the flag is a big plus!"
            />
        </div>
    )
}

export default App

If there is no question for a joke, we can use inline style to not display it
<h3 style={{display: props.question ? "block" : "none"}}>Question: {props.question}</h3>

##Mapping components

Higher order methods -map, filter, reduce

refer
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/filter
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/map
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/reduce
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/every
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/some
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find
// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/findindex

--create jokesData.js

const jokesData = [
    {
        id: 1,
        punchLine: "It’s hard to explain puns to kleptomaniacs because they always take things literally."
    },
    {
        id: 2,
        question: "What's the best thing about Switzerland?",
        punchLine: "I don't know, but the flag is a big plus!"
    }
]
export default jokesData

--Joke.js

import React from "react"

function Joke(props) {
    return (
        <div>
            <h3 style={{display: !props.question && "none"}}>Question: {props.question}</h3>
            <h3 style={{color: !props.question && "#888888"}}>Answer: {props.punchLine}</h3>
            (or)
             <h3>Question: {props.joke.question}</h3>
              <h3>Answer: {props.joke.punchLine}</h3>
            <hr/>
        </div>
    )
}

export default Joke

--App.js

import React from "react"

import Joke from "./Joke"
import jokesData from "./jokesData"

function App() {
    const jokeComponents = jokesData.map(joke => <Joke key={joke.id} question={joke.question} punchLine={joke.punchLine} />)
    (or)
    const jokeComponents = jokesData.map(item => <Joke key={item.id} joke={item} />)
    return (
        <div>
            {jokeComponents}            
        </div>
    )
}

export default App

--we have to add key prop which is unique when using map or iterating over an array. Usually it comes from service we are calling.

Eg: {props.product.price.toLocaleString("en-US", { style: "currency", currency: "USD" })} -- to display currency in USD

##Class based components

Eg: App.js

import React from "react"

class App extends React.Component { 
    
    yourMethodHere() {
        
    }
    
    render() { -- ** wrap return in render for showing anything on the page - write inside render before return
       const x = this.yourMethodHere()
        return (
            <div>
                <h1>{this.props.whatever}</h1> --in class components we have to use this.props
            </div>
        )
    }
}

export default App

--Eg with 3 components in index.js

import React, {Component} from "react"
import ReactDOM from "react-dom"

// #1
class App extends React.Component {
    render() {
        return (
            <div>
                <Header username="sruthi"/>
                <Greeting />
            </div>
        )    
    }
}

// #2
class Header extends React.Component {
    render() {
        return (
            <header>
                <p>Welcome, {this.props.username}!</p>
            </header>
        )    
    }
}

// #3
class Greeting extends Component {
    render() {
        const date = new Date()
        const hours = date.getHours()
        let timeOfDay
        
        if (hours < 12) {
            timeOfDay = "morning"
        } else if (hours >= 12 && hours < 17) {
            timeOfDay = "afternoon"
        } else {
            timeOfDay = "night"
        }
        return (
            <h1>Good {timeOfDay} to you, sir or madam!</h1>
        )
    }
}

ReactDOM.render(<App />, document.getElementById("root"))

##State

State is the data that component maintains - i.e. state can be change its value
where as in props - pass data from one comp to another comp cannot be changed by component receiving the props.
** props are immutable

* States can be added only in class based components

We can initialize state in constructor. In constructor, we have to call super to get React.component methods (setState)

Eg: App.js

import React, {Component} from "react"
class App extends Component { --we can extend Component and import it at top
    constructor() {
        super()
        this.state = { --state is an obj
            answer: "Yes", //initalizing state and we can change later
            isLoggedIn: false
        }
    }
    
    render() {
        let wordDisplay
        if (this.state.isLoggedIn) {
            wordDisplay = "in"
        } else {
            wordDisplay = "out"
        }
        return (
            <div>
                <h1>Is state important to know? {this.state.answer}</h1>
                <ChildComponent answer={this.state.answer}/> --passing the state to child components
                 <h1>You are currently logged {wordDisplay}</h1>
            </div>
        )
    }
}

export default App

--when we change state using setState, it will be automatically updated everywhere even in the child comps.

Note: if we use class App extends Component() { -paranthesis it will throw below error
TypeError: Cannot set property 'props' of undefined (/node_modules/react/cjs/react.development.js:236)

##Handling events 

// https://reactjs.org/docs/events.html#supported-events

we have to use JS events (camelcase names) in react

eg: App.js

import React from "react"

function handleClick() {
    console.log("I was clicked")
}

function App() {
    return (
        <div>
            <img onMouseOver={() => console.log("Hovered!")} src="https://www.fillmurray.com/200/100"/>
            <input type="checkbox" checked={props.item.completed} onChange={() => console.log("Changed!")} />
            <br />
            <br />
            <button onClick={this.handleClick}>Click me</button> --onClick event
        </div>
    )
}
export default App

##Changing state

eg: App.js

import React from "react"

class App extends React.Component {
    constructor() {
        super()
        this.state = {
            count: 0
        }
        this.handleClick = this.handleClick.bind(this) //we have to bind the class method as it is using parent class setState method
    }
    
    handleClick() {
        this.setState(prevState => {
            return {
                count: prevState.count + 1
            }
        })
    }
    
    render() {
        return (
            <div>
                <h1>{this.state.count}</h1>
                <button onClick={this.handleClick}>Change!</button>
                <ChildComponent count={this.state.count}/>>
            </div>
        )
    }
}

export default App

--setState method can take an object literal which is new version of state we want it to be.
i.e.  this.setState({ count: 1 })
or if we care about previous state, we pass it a function which takes prevState as parameter and return obj literal that represents new value of state.

whenever state changes, the child comp using that state render method will be called again and that comp will reflect the new version of props it's receiving 

eg: to change checked and unchecked to list of items
TodoItem.js

import React from "react"

function TodoItem(props) {
    return (
        <div className="todo-item">
            <input 
                type="checkbox" 
                checked={props.item.completed} 
                onChange={() => props.handleChange(props.item.id)}
            />
            <p>{props.item.text}</p>
        </div>
    )
}

export default TodoItem

App.js

import React from "react"

function TodoItem(props) {
    return (
        <div className="todo-item">
            <input 
                type="checkbox" 
                checked={props.item.completed} 
                onChange={() => props.handleChange(props.item.id)}
            />
            <p>{props.item.text}</p>
        </div>
    )
}

export default TodoItem

## Lifecycle methods

https://engineering.musefind.com/react-lifecycle-methods-how-and-when-to-use-them-2111a1b692b1  --before version 16.3
https://reactjs.org/blog/2018/03/29/react-v-16-3.html#component-lifecycle-changes --16.3 version

1. render method - it determines what gets rendered to the screen - we can call this method many times whenever a state or prop changes.
2. componentDidMount - very first time comp shows up/ comp is mounted to DOM, react calls this method and called only once when the comp is rendered on the screen. rendering the comp doesn't call this method. We can make api calls where we need to get data from external source.
 componentDidMount() {
        // GET the data I need to correctly display
    }
3. componentWillReceiveProps -  deprecated  in 16.3v : to still use it UNSAFE_componentWillReceiveProps
    componentWillReceiveProps(nextProps) {  //nextProps (can be any name) - new props
        if (nextProps.whatever !== this.props.whatever) {
            // do something important here
        }
    } 
    Every time a comp is receiving props from a parent comp, this method is run - it will be run when a comp is mounted and every single time parent comp gives props to child comps.

4. shouldComponentUpdate -optimize our app --instead of updating/rendering the comp with every change we can decide using this method whether to update the comp or not 
 shouldComponentUpdate(nextProps, nextState) {
        // return true if want it to update
        // return false if not
    }
5.componentWillUnmount - to do some clean up/tear down the things we setup.
 componentWillUnmount() {
        // teardown or cleanup your code before your component disappears
        // e.g. remove event listener
        
 6. getDerivedStateFromProps ---- New lifecycle methods in react 16.3v  --used rarely
        
    static getDerivedStateFromProps(props, state) {
        // return the new, updated state based upon the props
        // https://reactjs.org/docs/react-component.html#static-getderivedstatefromprops
        // https://reactjs.org/blog/2018/06/07/you-probably-dont-need-derived-state.html
    }
 7. getSnapshotBeforeUpdate ---- New lifecycle methods in react 16.3v 
   getSnapshotBeforeUpdate() {
        // create a backup of the current way things are
        // https://reactjs.org/docs/react-component.html#getsnapshotbeforeupdate
    }
 Deprecated life cycle methods in react 16.3v
     // componentWillMount() {    
    // }
 
  // componentWillUpdate() {
        
    // }
    }
     // componentWillReceiveProps(nextProps) {
    // }
    
  ## Conditional Rendering
  Load something on the screen, if the condition is true
  eg: 
  --App.js
  import React, {Component} from "react"
import Conditional from "./Conditional"

class App extends Component {
    constructor() {
        super()
        this.state = {
            isLoading: true
        }
    }
    
    componentDidMount() {
        setTimeout(() => {  //change the state after 1500 milli secs
            this.setState({
                isLoading: false
            })
        }, 1500)
    }
    
    render() {
        return (
            <div>
                {this.state.isLoading ?
                <h1>Loading...</h1> :
                <Conditional />}  
            </div>
        )
    }
}

export default App

-- conditional.js --functional comp to render conditionally
import React from "react"

function Conditional(props) {
    return <h1>Some cool stuff about conditional rendering</h1>
}

export default Conditional

--other way of conditional rendering : using &&

&& checks if first statement is true, if it is true it return second statement
i.e. true && false : returns false

eg: App.js

import React, {Component} from "react"
import Conditional from "./Conditional"

class App extends Component {
    constructor() {
        super()
        this.state = {
            unreadMessages: ["a", "b"]
        }
    }
    // &&
    render() {
        return (
            <div>
                {
                    this.state.unreadMessages.length > 0 && 
                    <h2>You have {this.state.unreadMessages.length} unread messages!</h2>
                    //if first statement is true, returns second statement 
                }
            </div>
        )
    }
}

export default App

eg: to display logged in/out 

--App.js

import React from "react"

/*
Challenge:

Given a stateless functional component:
1. Follow the steps necessary to add state to it,
    // class-based component
    // constructor method
2. Have state keep track of whether the user is logged in or not
    // isLoggedIn: Boolean (true or false)
3. Add a button that logs the user in/out
    // event listener (onClick)
    a. extra challenge - make the button display "log in" if they're not logged in and "log out" if they are
        // Conditional Rendering
4. Display text that says "Logged in" if the user is logged in, or "Logged out" if they're not.
    // Conditional Rendering
*/

class App extends React.Component {
    constructor() {
        super()
        this.state = {
            isLoggedIn: false
        }
        this.handleClick = this.handleClick.bind(this)
    }
    
    handleClick() {
        this.setState(prevState => {
            return {
                isLoggedIn: !prevState.isLoggedIn
            }
        })
    }
    
    render() {   
        let buttonText = this.state.isLoggedIn ? "LOG OUT" : "LOG IN"
        let displayText = this.state.isLoggedIn ? "Logged in" : "Logged out"
        return (
            <div>
                <button onClick={this.handleClick}>{buttonText}</button>
                <h1>{displayText}</h1>
            </div>
        )
    }
}

export default App

## conditional styling

import React from "react"

function TodoItem(props) {
    const completedStyle = {
        fontStyle: "italic",
        color: "#cdcdcd",
        textDecoration: "line-through"
    }
    
    return (
        <div className="todo-item">
            <input 
                type="checkbox" 
                checked={props.item.completed} 
                onChange={() => props.handleChange(props.item.id)}
            />
            <p style={props.item.completed ? completedStyle: null}>{props.item.text}</p>
        </div>
    )
}

export default TodoItem

### Fetching data from an API

Fetching can be done using fetch method in global scope fetches resource from network returning a promise which is fulfilled once the response is available. and in componentDidMount lifecycle method.

eg: App.js

import React, {Component} from "react"

// https://developer.mozilla.org/en-US/docs/Web/API/WindowOrWorkerGlobalScope/fetch
// https://swapi.co/
// https://medium.com/javascript-scene/master-the-javascript-interview-what-is-a-promise-27fc71e77261

class App extends Component {
    constructor() {
        super()
        this.state = {
            loading: false,
            character: {}
        }
    }
    
    componentDidMount() {
        this.setState({loading: true})
        fetch("https://swapi.co/api/people/1")  ---fetches the data from api
            .then(response => response.json())  --converts the response to json
            .then(data => {  --sets the state with data received 
                this.setState({
                    loading: false,
                    character: data
                })
            })
    }
    
    render() {
        const text = this.state.loading ? "loading..." : this.state.character.name    //display loading.. till data is fetched from api
        return (
            <div>
                <p>{text}</p>
            </div>
        )
    }
}

export default App

## Forms
React Docs about Forms:
https://reactjs.org/docs/forms.html

Like in js, where we collect all the inputs of the form before we submit, in react we update the state for each keystroke user is making
so that we always have most updated form what user is typing.


eg: App.js

import React, {Component} from "react"

class App extends Component {
    constructor() {
        super()
       this.state = {
            firstName: "",
            lastName: "",
            isFriendly: false,
            gender: "",
            favColor:"blue"
        }
        this.handleChange = this.handleChange.bind(this)
    }
    
    handleChange(event) {
        this.setState({
            [event.target.name]: event.target.value    //this works with any input of type text (i.e. text,email,number, phone,etc)
        })
    }
    
    render() {
        return (
            <form>
                <input type="text" name="firstName" placeholder="First Name" onChange={this.handleChange} />
                <br />
                <input type="text" name="lastName" placeholder="Last Name" onChange={this.handleChange} />
                <h1>{this.state.firstName} {this.state.lastName}</h1>
            </form>
        )
    }
}

export default App

--- [event.target.name] -- get the name from the input field (should wrap in [] because we have a string property in object)
--event.target.value  --- input value
** we should pass name property that exactly matches state property

# Controlled forms
state directs what we are showing in the inputs of the form. It drives well with the idea that state should be single source of truth.
For this we need to add 'value' property to inputs

 <form>
                <input type="text" value={this.state.firstName} name="firstName" placeholder="First Name" onChange={this.handleChange} />
                <br />
                <input type="text" value={this.state.lastName} name="lastName" placeholder="Last Name" onChange={this.handleChange} />
                <h1>{this.state.firstName} {this.state.lastName}</h1>
            </form>

With this, we are forcing the value to exactly match what state is

# we can pull values out of event.target before we set any state --makes a copy of name, value before we access it
 handleChange(event) {
        const {name, value} = event.target      //react synthetic event 
        this.setState({
            [name]: value
        })
    }
    
 --textarea
 in normal html textarea is not a self closing tag, but in react to make it consistent with input, it is made self closing with value property so that we can update it similar to input.
 <textarea value={"Some default value"}
 onChange={this.handleChange}/>
 
--checkboxes
a type from input - it doesn't have value property, so we should use type and checked properties to set state in handleChange
<label>  <input 
                        type="checkbox" 
                        name="isFriendly"
                        checked={this.state.isFriendly}
                        onChange={this.handleChange}
                    /> Is friendly?
                </label>
                
    handleChange(event) {
        const {name, value, type, checked} = event.target 
        type === "checkbox" ? this.setState({ [name]: checked }) : this.setState({ [name]: value })
    }
  
  --radio buttons
  these are combination of input type text and checkbox - i.e. they use both value and checked properties
  ** give same name to different radio buttons this tells DOM to only select one value from diff buttons
  
  <label>
                    <input 
                        type="radio" 
                        name="gender"
                        value="male"
                        checked={this.state.gender === "male"}
                        onChange={this.handleChange}
                    /> Male
                </label>
                <br />
                <label>
                    <input 
                        type="radio" 
                        name="gender"
                        value="female"
                        checked={this.state.gender === "female"}
                        onChange={this.handleChange}
                    /> Female
                </label>
  
  Note: we can use  {/* Formik */} library to write forms easily in react
  
  --select
  react provides a value property for select to change the state
  
  <select 
                    value={this.state.favColor}
                    onChange={this.handleChange}
                    name="favColor"  --should match the state 
                >
                    <option value="">-- Please Choose a color --</option>
                    <option value="blue">Blue</option>
                    <option value="green">Green</option>
                    <option value="yellow">Yellow</option>
                </select>
   # Submitting the form
   a button inside a form is acts like input submit in html5
   i.e. like <input type="submit" value="submit form"/>
   so buttons inside a form in html5 when they are clicked they are a submit button and they will fire onSubmit of the form itself.
   We can add onClick on the button or onSubmit on the form itself
   <form onSubmit={this.handleSubmit}> ...</form>   we have to write handleSubmit method submitting the form to an api or something.
   
   # eg: If we have checkboxes defined as an object in state
   this.state = {
   dietaryRestrictions: {
                isVegan: false,
                isKosher: false,
                isLactoseFree: false
            }
   }
   
   in the form, we have
   <label>
                        <input 
                            type="checkbox"
                            name="isVegan"
                            onChange={this.handleChange}
                            checked={this.state.dietaryRestrictions.isVegan}  //should be nested level
                        /> Vegan?
                    </label>
                    <br />
                    
   <label>
                        <input 
                            type="checkbox"
                            name="isKosher"
                            onChange={this.handleChange}
                            checked={this.state.dietaryRestrictions.isKosher}
                        /> Kosher?
                    </label>
                    <br />
   
   As checkboxes doesn't have value property we need to pull type and checked properties
   
   ** When we are updating one part of state, it will combine with rest of the state but its not true/we are sure if we are updating nested part of the state, it will update rest of the state.
   
   handleChange(event) {
        const {name, value, type, checked} = event.target
        type === "checkbox" ? 
            this.setState({
                dietaryRestrictions: { //check dietaryRestrictions checked property
                    [name]: checked
                }
            })
        :
        this.setState({
            [name]: value
        }) 
    }
   
   this gives an error saying we are changing from controlled form to an uncontrolled form, so we can use object spread notation which takes the prevState and updates the dietaryRestrictions.
   
  object spread operator : https://redux.js.org/recipes/using-object-spread-operator
  
  handleChange(event) {
        const {name, value, type, checked} = event.target
        type === "checkbox" ? 
            this.setState(prevState => {
                return {
                    dietaryRestrictions: {
                        ...prevState.dietaryRestrictions,   //obj spread operator
                        [name]: checked
                    }
                }
            })
        :
        this.setState({
            [name]: value
        }) 
    }
   
   --** React doesn't display boolean(true or false) as text on screen unless we make them as text
   eg:
   <p>Your dietary restrictions:</p>
                <p>Vegan: {this.state.isVegan ? "Yes" : "No"}</p>
                <p>Kosher: {this.state.isKosher ? "Yes" : "No"}</p>
                <p>Lactose Free: {this.state.isLactoseFree ? "Yes" : "No"}</p>
                
  ## Container/Component Architecture
  To separate the concerns we can have a comp that maintains state and have methods that updates state and delegates all ui logic to presentational comp , and a presentational comp tht receives props and display the content correctly
  // https://medium.com/@dan_abramov/smart-and-dumb-components-7ca2f9a7c7d0
  eg:
  --create App.js 
  
import React, {Component} from "react"
import Form from "./FormContainer"

function App() {
    return (
        <Form />
    )
}

export default App

--FormContainer.js contains state and handle methods - caring about business logic of the form

import FormComponent from "./FormComponent"
class Form extends Component {
    constructor() {
        super()
        this.state = {......
        }
        this.handleChange = this.handleChange.bind(this)
    }
    
    handleChange(event) {
        ...
    }
    
    render() {
        return(
        <FormComponent 
            handleChange={this.handleChange}
            data={this.state} //pass the state as a data obj to FormComponent (or)
            {...this.state} //using object spread operator which works with proper ECMAscript we can use {props.firstName} in FormComponent.
        />
        
      )
    }
}

export default Form

 -- FormComponent.js contains rendering logic - caring abt only UI comp of the form
  function FormComponent(props) {
    return (
        <main>
            <form>
                <input 
                    name="firstName" 
                    value={props.data.firstName} //from FormContainer
                    onChange={props.handleChange} //from FormContainer
                    placeholder="First Name" 
                />
                <br />
              ...........
        </main>
    )
}
export default FormComponent

Note:  --with redux and context api separating comps with containers like this may not be a good idea

## Writing modern react apps - react is changing constantly and we need to look the change log

# change handle change functions to arrow funcs

handleChange(event) {
    ....
    }
 to
 handleChange = (event) => {...}   ** this gives a lexical 'this' inside which means it doesn't create its own this context but uses the 'this' of its surrounding enivronment.
 so with this we no longer need to bind methods in constructor (i.e. no need of this.handleChange = this.handleChange.bind(this) )
 
 # change to use class properties --it will be included
 class App extends Component {
    state = {
        firstName: ""   //with this no need to use constructor and create state in constructor
    }
    ....}
   # changes to life cycle methods
   # Other modern/advanced React features/topics to learn:
 
 * Official React Context API - https://reactjs.org/docs/context.html  --- kind of replacement to redux
 * Error Boundaries - https://reactjs.org/docs/error-boundaries.html
 * render props - https://reactjs.org/docs/render-props.html
 * Higher Order Components - https://reactjs.org/docs/higher-order-components.html
 * React Router - https://reacttraining.com/react-router/core/guides/philosophy -- to build spa with declarative react router
 * React Hooks - https://reactjs.org/docs/hooks-intro.html  -- including and modifying states in functional comps
 * React lazy, memo, and Suspense (for async loading)- https://reactjs.org/blog/2018/10/23/react-v-16-6.html
 
 ## Practice projects
 https://medium.freecodecamp.org/every-time-you-build-a-to-do-list-app-a-puppy-dies-505b54637a5d

 https://medium.freecodecamp.org/want-to-build-something-fun-heres-a-list-of-sample-web-app-ideas-b991bce0ed9a

 https://medium.freecodecamp.org/summer-is-over-you-should-be-coding-heres-yet-another-list-of-exciting-ideas-to-build-a95d7704d36d

 
